//
//  ObjectScopes.swift
//  SwiftBySundell
//
//  Created by Vladislav Gushin on 25/02/2019.
//  Copyright © 2019 Vladislav Gushin. All rights reserved.
//

import Foundation
import Swinject
/*Область объекта - это параметр конфигурации, позволяющий определить, как экземпляр, предоставленный контейнером DI, используется в системе. Он представлен enum ObjectScope в Swinject.
 
 Область объекта указывается с помощью метода inObjectScope при регистрации пары типа службы и фабрики компонентов. Например:*/

fileprivate func test() {
    let container = Container()
    container.register(Animal.self) { _, name in Cat(name: name) }.inObjectScope(.container)
}

/*Встроенные области
 
 Transient
 
 Если указан ObjectScope.transient, экземпляр, предоставленный контейнером, не является общим. Другими словами, контейнер всегда создает новый экземпляр при разрешении типа.
 
 Если указана эта область, разрешение циклических зависимостей не будет работать должным образом.
 
 Graph (the default scope)
 
 При использовании ObjectScope.graph экземпляр всегда создается, как в ObjectScope.transient, если вы напрямую вызываете метод resolv контейнера, но экземпляры, разрешенные в замыканиях фабрики, совместно используются при разрешении корневого экземпляра для построения графа объекта.
 
 Container
 
 В ObjectScope.container экземпляр, предоставленный контейнером, используется совместно с контейнером и его дочерними контейнерами (см. Иерархия контейнеров). Другими словами, когда вы разрешаете тип в первый раз, он создается контейнером, вызывая закрытие фабрики. Тот же экземпляр возвращается контейнером в любом последующем разрешении типа.
 
 Эта область также известна как Singleton в других структурах DI.
 
 Weak
 
 В ObjectScope.weak экземпляр, предоставленный контейнером, используется совместно с контейнером и его дочерними контейнерами, если на него имеются другие сильные ссылки. Как только все сильные ссылки на экземпляр перестают существовать, он больше не будет передан, и новый экземпляр будет создан при следующем разрешении типа.
 
 Выше относится к ссылочным типам - типы значений не являются общими в этой области объекта.*/



fileprivate protocol Animal {
    var name: String { get }
}

fileprivate class Cat: Animal {
    let name: String

    init(name: String) {
        self.name = name
    }
}
